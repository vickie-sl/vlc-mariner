Static (adj.)
Lacking in movement, action, or change, especially in a way viewed as undesirable or uninteresting.

You’ve probably reviewed your own code at some point in your life. 

Performing a source code review is one of the best ways to find security issues in applications. Looking at source code to identify vulnerabilities without running the program is also called "static code analysis".

There are many ways you can start reviewing your code for security bugs. But in general, it’s good to start by learning what the most common vulnerabilities and security pitfalls are for the type of application you are building. Then, get familiar with the indicators and signatures of those vulnerabilities so that you can identify similar patterns in source code. As an example, the signature for an XXE vulnerability is passing user-supplied XML to a parser without disabling DTDs or external entities. 

During a code review session, you typically look for bad security patterns, universal issues like input validation and injection issues, and low-level coding flaws like arithmetic issues and memory access bugs. You can also search for strings, keywords, and code patterns known to be indicators for vulnerabilities or misconfiguration: hardcoded API keys, encryption keys, and database passwords, outdated dependencies versions, methods known to be unsafe, etc. For more information about conducting code reviews, visit this guide: https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdf.

Automated static code analysis techniques are often driven by compiler technologies. One of these methods is data-flow analysis. Data flow analysis studies how data propagate in a program. For instance, you can track sensitive information or user-controlled input and how they interact with parts of the program. Think of data as water: flowing from the source of the water (the tap) to the sink. A "source" is the code that allows a vulnerability to happen, whereas a "sink" is where the vulnerability actually happens. Take command injection vulnerabilities, for example. A "source" in this case could be a function that takes in user input. Whereas the "sink" would be functions that execute system commands. If the untrusted user input can get from "source" to "sink" without proper sanitization or validation, there is a command injection vulnerability. Many common vulnerabilities can be identified by tracking this "data flow" from appropriate sources to corresponding sinks. The ancient mariners have long told a tale, of a tool named Joern that can hunt down code quality issues made from hell. Remember this phrase as you near the end of the game, these queries sometimes look like a chain. But first, to learn the craft of the ancient mariner, you must first find a string with an anchor ⚓. 

As you can probably tell, this process is super dependent on the programming language in use, etc. On the other hand, dynamic analyses tools act more like robo pentesters. They paste "<script>alert()</script>" into form fields is what I’ve heard. 
